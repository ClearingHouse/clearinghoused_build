upstream cache_server {
  server 127.0.0.1:6379; #default port
  keepalive 128;
}
upstream clearblock_api_server {
  server 127.0.0.1:4000;
  keepalive 30;
}
upstream clearblock_t_api_server {
  server 127.0.0.1:14000;
  keepalive 30;
}

# with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
# you can tell the browser that it can only download content from the domains you explicitly allow
# http://www.html5rocks.com/en/tutorials/security/content-security-policy/
# https://www.owasp.org/index.php/Content_Security_Policy
# I need to change our application code so we can increase security by disabling 'unsafe-inline' 'unsafe-eval'
# directives for css and js(if you have inline css or js, you will need to keep it too).
# more: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful
add_header Content-Security-Policy   "default-src 'self'; script-src 'self' https://ssl.google-analytics.com https://query.yahooapis.com; img-src 'self' data: https://ssl.google-analytics.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://themes.googleusercontent.com; frame-src 'none'; object-src 'self'; connect-src 'self' wss://$host wss://clearwallet.co wss://*.clearwallet.co https://*.clearwallet.co https://clearwallet.co https://api.rollbar.com;";

server {
  listen 80 default_server deferred;
  server_name _;
  rewrite ^ https://$host$request_uri permanent;
}

server {
  #DEV PORT (firewall on production systems)
  listen 81;
  server_name _;
  
  #for nginx newrelic agent
  location /nginx_stub_status {
    stub_status on;
    access_log off;
    allow 127.0.0.0/8;
    deny all;
  }  
}

server {
  listen 443 default_server ssl deferred;
  server_name _;
  
  ###############
  # SSL - For production use
  #ssl_certificate      /etc/ssl/certs/clearblockd.pem;
  #ssl_certificate_key  /etc/ssl/private/clearblockd.key;
  
  # SSL - For development use
  ssl_certificate      /etc/ssl/certs/ssl-cert-snakeoil.pem;
  ssl_certificate_key  /etc/ssl/private/ssl-cert-snakeoil.key;
  
  # support FS, and BEAST protection - https://coderwall.com/p/ebl2qa
  server_tokens off;
  ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_session_timeout 5m;
  ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-RC4-SHA:ECDHE-RSA-RC4-SHA:ECDH-ECDSA-RC4-SHA:ECDH-RSA-RC4-SHA:ECDHE-RSA-AES256-SHA:RC4-SHA;  
  ###############
  
  access_log /var/log/nginx/clearblock.access.log;
  error_log /var/log/nginx/clearblock.error.log;
  
  # basic rate limiting
  limit_conn conn_limit_per_ip 15;
  limit_req zone=req_limit_per_ip burst=100 nodelay;
  
  # this has to be higher than we'd like otherwise, due to the create_support_case API call...
  client_max_body_size 1m; 

  ###############
  # BASE SITE SERVING (STATIC FILES)

  # CACHING - For production use
  open_file_cache max=200000 inactive=20s; 
  open_file_cache_valid 30s; 
  open_file_cache_min_uses 2;
  open_file_cache_errors on;    
    
  location /_asset_img/ {
    access_log off;
    expires 1h;
    alias /home/xch/.config/clearblockd/asset_img/;
  }
  location /_t_asset_img/  {
    access_log off;
    expires 1h;
    alias /home/xch/.config/clearblockd-testnet/asset_img/;
  }
  location /src  {
    #For dev/testing (uses unminified resources)
    open_file_cache off;
    expires off;
    alias /home/xch/clearwallet/src/;
  }
  location /servers.json  {
    alias /home/xch/clearwallet/servers.json;
  }
  location /  {
    access_log off;
    expires 1h;
    root /home/xch/clearwallet/build/;
    
    #Enable this during single server system updates
    #root /home/xch/clearinghoused_build/dist/linux/nginx/upgrade_root/;
  }
  #############

  #####
  # PRODUCTION  
  # PROXY TO COUNTERWALLETD API REQUESTS (WSGI) - try to hit the cache in redis first
  location ^~ /_api
  {
    #reject everything except GET, POST and OPTIONS
    limit_except GET POST OPTIONS {
      deny all;
    }

    include /etc/nginx/sites-enabled/clearblock_api_cache.inc;
    set $redis_db "0";

    # Send to app server if Redis could not answer the request
    error_page 404 405 550 = @wsgi_api;
  }
  # PROXY TO COUNTERWALLETD API BACKEND (WSGI)
  location @wsgi_api {
    include /etc/nginx/sites-enabled/clearblock_api.inc;
    rewrite ^/_api/?$ /api/?  break;    
    proxy_pass   http://clearblock_api_server;
  }
  # PROXY TO COUNTERWALLETD FEED BACKEND (socket.io)
  location ^~ /_feed {
    include /etc/nginx/sites-enabled/clearblock_socketio.inc;
    proxy_pass   http://127.0.0.1:4101/socket.io;
  }
  # PROXY TO COUNTERWALLETD CHAT BACKEND (socket.io)
  location ^~ /_chat {
    include /etc/nginx/sites-enabled/clearblock_socketio.inc;
    proxy_pass   http://127.0.0.1:4102/socket.io;
  }
  
  #####
  # TESTNET  
  # PROXY TO COUNTERWALLETD API REQUESTS (WSGI) - try to hit the cache in redis first
  location ^~ /_t_api
  {
    #reject everything except GET, POST and OPTIONS
    limit_except GET POST OPTIONS {
      deny all;
    }

    include /etc/nginx/sites-enabled/clearblock_api_cache.inc;
    set $redis_db "1";

    # Send to app server if Redis could not answer the request
    error_page 404 405 550 = @t_wsgi_api;
  }
  # PROXY TO COUNTERWALLETD API BACKEND (WSGI)
  location @t_wsgi_api {
    include /etc/nginx/sites-enabled/clearblock_api.inc;
    rewrite ^/_t_api/?$ /api/?  break;
    proxy_pass   http://clearblock_t_api_server;
  }
  # PROXY TO COUNTERWALLETD FEED BACKEND (socket.io)
  location ^~ /_t_feed {
    include /etc/nginx/sites-enabled/clearblock_socketio.inc;
    proxy_pass   http://127.0.0.1:14101/socket.io;
  }
  # PROXY TO COUNTERWALLETD CHAT BACKEND (socket.io)
  location ^~ /_t_chat {
    include /etc/nginx/sites-enabled/clearblock_socketio.inc;
    proxy_pass   http://127.0.0.1:14102/socket.io;
  }
}
